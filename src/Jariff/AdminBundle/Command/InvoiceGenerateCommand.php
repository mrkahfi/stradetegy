<?php

namespace Jariff\AdminBundle\Command;

use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Jariff\MemberBundle\Entity\Member;
use Jariff\MemberBundle\Entity\Invoice;

class InvoiceGenerateCommand extends ContainerAwareCommand
{
    /**
     * @see Command
     */
    protected function configure()
    {
        $this->setName('jariff-invoice-generate');
    }

    /**
     * @see Command
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $em   = $this->getContainer()->get('doctrine.orm.entity_manager');
        $conn = $this->getContainer()->get('database_connection'); //alias for doctrine.dbal.default_connection

        // get mtm active subscription from active member 
        $subscription = $conn->fetchAll('
            SELECT m.id as ms_id
            FROM member m 
            LEFT JOIN member_subscription ms ON m.id = ms.member_id
            where 
            m.status = "active"
            and ms.active = true
            and ms.paymentTerm = "mtm"
        ');

        if ($subscription) {
            foreach ($subscription as $id) {
                $invoiceDate = $conn->fetchColumn('
                    SELECT i.date as date
                    FROM invoice i
                    WHERE 
                    i.subscription_id = '.$id['ms_id'].'
                    ORDER BY i.id DESC'
                );

                $createNew = false;

                if ($invoiceDate) {
                    // if last invoice wast 1 month ago, then create new invoice
                    $invoiceDatetime = \DateTime::createFromFormat('Y-m-d H:i:s', $invoiceDate);
                    $invoiceDatetime->add(new \DateInterval('P1M'));
                    if ((new \DateTime()) > $invoiceDatetime) {
                        // new invoice
                        $createNew = true;
                        var_dump( $invoiceDatetime->format('Y-m-d H:i:s'));
                    }
                } 
                // kemungkinan kecil, kosong karena belum ada invoice
                else {
                    // new invoice
                    $createNew = true;
                }

                if ($createNew) {
                    $subscription = $em->getRepository('JariffMemberBundle:MemberSubscription')->find($id['ms_id']);
                    $member = $subscription->getMember();
                    $profile = $member->getProfile();

                    $invoice = new Invoice();
                    $invoice->setAmount($subscription->getTotal());
                    $invoice->setDescription('New invoice generated by system, ARB daily cronjob');
                    $invoice->setMember($member);
                    $invoice->setBillToName($profile->getBillToName());
                    $invoice->setBillToAdress($profile->getBillToAdress());
                    $invoice->setBillToEmail($profile->getBillToEmail());
                    $invoice->setBillToPhone($profile->getBillToPhone());
                    $invoice->setDateIssued(new \DateTime());
                    $invoice->setSubscription($subscription);
                    $invoice->setSales($subscription->getOwner());
                    $invoice->setType($profile->getInvoiceType());

                    $invoiceAmount = $conn->fetchColumn('
                        SELECT count(i.id) as count
                        FROM invoice i
                        WHERE 
                        i.member_id = '.$member->getId()
                    );

                    $invoice->setNumber($member->getNumber().'-'.(intval($invoiceAmount)+1));

                    $em->persist($invoice);
                    $output->writeln('New invoice');

                }
            }
        } else {
            $output->writeln('No MTM subscription active');
            // send notice
        }



        // $em->persist($admin);
        $em->flush();
    }
}
