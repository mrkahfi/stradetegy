{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not sameas(false) -%}
            {{- ' %s="%s"'|format(name, value is sameas(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% block compressed_root %}
    {% spaceless %}
        {{ block('root') }}
    {% endspaceless %}
{% endblock %}

{% block root %}
    {% set listAttributes = item.childrenAttributes %}
    {{ block('list') -}}
{% endblock %}

{% block list %}

    {% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        {# <divul{{ knp_menu.attributes(listAttributes) }}> #}
            {{ block('children') }}
        {# </ul> #}
    {% endif %}
{% endblock %}

{% block list2 %}

    {% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}
        {% import _self as knp_menu %}
        {# <divul{{ knp_menu.attributes(listAttributes) }}> #}
            {{ block('children2') }}
        {# </ul> #}
    {% endif %}
{% endblock %}

{% block children %}
    {# save current variables #}
    {% set currentOptions = options %}
    {% set currentItem = item %}
    {# update the depth for children #}
    {% if options.depth is not none %}
        {% set options = currentOptions|merge({'depth': currentOptions.depth - 1}) %}
    {% endif %}
    {% for item in currentItem.children %}



        <div class="accordion-group ">
                    <div class="accordion-heading">
                      <a class="accordion-toggle 


                        {% if matcher.isCurrent(item) -%}
                            opened
                        {%- elseif matcher.isAncestor(item, options.depth) %}
                            opened
                        {%- endif %}

                            " 

                        {% if item.hasChildren %}
                            data-toggle="collapse" data-parent="#accordion2"
                        {% else %}
                        {% endif %} 
                        href="{% if item.hasChildren %}#{% endif %}{{ item.uri }}">
                        <img src="/bundles/jariffproject/admin/img/icons/stuttgart-icon-pack/32x32/{{ item.attribute('data-icon') }}">
                        <span>{{ item.label }} </span><span class="arrow"></span>
                      </a>
                    </div>
        {% if item.hasChildren %}
            <ul id="{{ item.uri }}" class="accordion-body nav nav-list 
                        {%- if matcher.isCurrent(item) %}
                            in
                        {%- elseif matcher.isAncestor(item, options.depth) %}
                            in
                        {%- endif %} collapse">
            {# <ul {{ knp_menu.attributes(listAttributes) }}> #}
                {{ block('item') }}
            </ul>
        {% endif %}
    </div>

    {% endfor %}
    {# restore current variables #}
    {% set item = currentItem %}
    {% set options = currentOptions %}
{% endblock %}

{% block children2 %}
    {# save current variables #}
    {% set currentOptions = options %}
    {% set currentItem = item %}
    {# update the depth for children #}
    {% if options.depth is not none %}
        {% set options = currentOptions|merge({'depth': currentOptions.depth - 1}) %}
    {% endif %}
    {% for item in currentItem.children %}
            {{ block('item2') }}
    {% endfor %}
    {# restore current variables #}
    {% set item = currentItem %}
    {% set options = currentOptions %}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}
        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}
        {% import _self as knp_menu %}{# 
        <li{{ knp_menu.attributes(attributes) }}>
            {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children# }
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
        </li> #}
            {{ block('list2') }}
    {% endif %}
{% endblock %}

{% block item2 %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.depth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}
        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}
        {% import _self as knp_menu %}
        <li{{ knp_menu.attributes(attributes) }}>
            {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list2') }}
        </li>
    {% endif %}
{% endblock %}

{% block linkElement %}{% import _self as knp_menu %}
<a href="{{ item.uri }}"{{ knp_menu.attributes(item.linkAttributes) }}>
    {% if item.attribute('data-icon') is not empty %}
        <img src="{{ asset('/bundles/jariffproject/admin/img/icons/stuttgart-icon-pack/32x32/'~item.attribute('data-icon')) }}"
             alt="Dashboard">
    {% endif %}
    <span>{{ block('label') }}</span>
    {% if item.linkAttribute('data-toggle') is not empty %}
        <span class="arrow"></span>
    {% endif %}
    </a>{% endblock %}

{% block spanElement %}{% import _self as knp_menu %}
    <span{{ knp_menu.attributes(item.labelAttributes) }}>{{ block('label') }}</span>{% endblock %}

{# block label %}{% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}{% endblock %#}
{% block label %}{{ item.label|trans(item.getExtra('translation_params', {}), item.getExtra('translation_domain', 'messages')) }}{% endblock %}